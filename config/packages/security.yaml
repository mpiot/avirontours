security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        app_users:
            entity:
                class: App\Entity\User
                property: username

        logbook_users:
            memory:
                users:
                    logbook:
                        password: '%env(APP_LOGBOOK_USER_PASSWORD)%'
                        roles: 'ROLE_LOGBOOK_USER'
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        logbook:
            host: '%logbook_host%'
            pattern: ^/logbook-entry
            provider: logbook_users
            http_basic: ~
        main:
            lazy: true
            provider: app_users

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall
            entry_point: App\Security\AppLoginAuthenticator
            custom_authenticators:
                - App\Security\AppLoginAuthenticator
            logout:
                path: app_logout
                # where to redirect after logout
                # target: app_any_route
            remember_me:
                secret: '%kernel.secret%'
                lifetime: 604800 # 1 week in seconds
                path: /
            two_factor:
                auth_form_path: 2fa_login    # The route name you have used in the routes.yaml
                check_path: 2fa_login_check  # The route name you have used in the routes.yaml

            # by default, allows 5 login attempts per minute
            login_throttling: ~

            # https://symfony.com/doc/current/security/impersonating_user.html
            switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/2fa, role: IS_AUTHENTICATED_2FA_IN_PROGRESS }
        - { path: ^/admin, roles: [ROLE_LOGBOOK_ADMIN, ROLE_MATERIAL_ADMIN, ROLE_SPORT_ADMIN, ROLE_USER_ADMIN, ROLE_SEASON_MEDICAL_CERTIFICATE_ADMIN, ROLE_SEASON_PAYMENTS_ADMIN] }
        - { path: ^/profile, roles: ROLE_USER }

    role_hierarchy:
        ROLE_SEASON_ADMIN:
            - ROLE_SEASON_MEDICAL_CERTIFICATE_ADMIN
            - ROLE_SEASON_PAYMENTS_ADMIN
        ROLE_ADMIN:
            - ROLE_LOGBOOK_ADMIN
            - ROLE_MATERIAL_ADMIN
            - ROLE_SEASON_ADMIN
            - ROLE_SPORT_ADMIN
            - ROLE_USER_ADMIN
        ROLE_SUPER_ADMIN:
            - ROLE_ADMIN
            - ROLE_ALLOWED_TO_SWITCH

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
