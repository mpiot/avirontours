# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    logbook_subdomain: cahierdesorties
    domain: '%env(APP_DOMAIN)%'
    logbook_domain: '%logbook_subdomain%.%domain%'
    default_admin_email: notifications@avirontours.fr
    default_sender_email: no-reply@avirontours.fr
    container.dumper.inline_factories: true

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        bind:
            $senderEmail: '%env(string:default:default_sender_email:SENDER_EMAIL)%'
            string $logbookDomain: '%logbook_domain%'

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{DependencyInjection,Entity,Tests,Kernel.php}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones
    App\EventListener\FixPostgreSQLDefaultSchemaListener:
        tags:
            - { name: doctrine.event_listener, event: postGenerateSchema }

    App\EventListener\ShellAbbreviationSubscriber:
        tags:
            - { name: 'doctrine.event_subscriber' }

    App\EventListener\ShellMileageUpdater:
        tags:
            -
                name: 'doctrine.orm.entity_listener'
                event: 'prePersist'
                entity: 'App\Entity\LogbookEntry'
                lazy: true
            -
                name: 'doctrine.orm.entity_listener'
                event: 'preUpdate'
                entity: 'App\Entity\LogbookEntry'
                lazy: true
            -
                name: 'doctrine.orm.entity_listener'
                event: 'postUpdate'
                entity: 'App\Entity\LogbookEntry'
                lazy: true
            -
                name: 'doctrine.orm.entity_listener'
                event: 'preRemove'
                entity: 'App\Entity\LogbookEntry'
                lazy: true

    Monolog\Processor\WebProcessor:
        tags:
            - { name: monolog.processor }
